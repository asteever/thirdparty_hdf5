#! /bin/sh
#
# Copyright by The HDF Group.
# All rights reserved.
#
# This file is part of HDF5.  The full HDF5 copyright notice, including
# terms governing use, modification, and redistribution, is contained in
# the files COPYING and Copyright.html.  COPYING can be found at the root
# of the source code distribution tree; Copyright.html can be found at the
# root level of an installed copy of the electronic HDF5 document set and
# is linked from the top-level documents page.  It can also be found at
# http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have
# access to either file, you may request a copy from help@hdfgroup.org.
#
# Tests for the h5recover tool

# Determine which filters are available
USE_FILTER_SZIP="@USE_FILTER_SZIP@"
USE_FILTER_DEFLATE="@USE_FILTER_DEFLATE@"
USE_FILTER_SHUFFLE="@USE_FILTER_SHUFFLE@"
USE_FILTER_FLETCHER32="@USE_FILTER_FLETCHER32@"
USE_FILTER_NBIT="@USE_FILTER_NBIT@"
USE_FILTER_SCALEOFFSET="@USE_FILTER_SCALEOFFSET@"

TOOL=trecover                  # The tool name
TOOL_BIN=`pwd`/$TOOL           # The path of the tool binary
TOOLDataFile=trecover.h5
TOOLCTLDataFile=CTL$TOOLDataFile
RECOVERTOOL=h5recover                      # The tool name
RECOVERTOOL_BIN=`pwd`/$RECOVERTOOL         # The path of the tool binary
H5DIFF=../h5diff/h5diff
TESTDIR=`pwd`/../testfiles


CMP='cmp -s'
DIFF='diff -c'

nerrors=0
verbose=yes

# The build (current) directory might be different than the source directory.
if test -z "$srcdir"; then
   srcdir=.
fi

#test -d $TESTDIR || mkdir $TESTDIR

# Print a line-line message left justified in a field of 70 characters
# beginning with the word "Testing".
#
TESTING() {
   SPACES="                                                               "
   echo "Testing $* $SPACES" | cut -c1-70 | tr -d '\012'
}

# Run a test and print PASS or *FAIL*.  If a test fails then increment
# the `nerrors' global variable and (if $verbose is set) display the
# difference between the actual output and the expected output. The
# expected output is given as the first argument to this function and
# the actual output file is calculated by replacing the `.ddl' with
# `.out'.  The actual output is not removed if $HDF5_NOCLEANUP has a
# non-zero value.

# $1: Expected output file
# $2-: arguments for the trecover program
#
TOOLTEST() {
    expect="$srcdir/testfiles/$1"
    actual=`basename $1 .txt`.out
    actual_err=`basename $1 .txt`.err
    shift

    # Run test.
    TESTING $TOOL $@
    $RUNSERIAL $TOOL_BIN $@
    # expect first diff to fail
    $RUNSERIAL $H5DIFF $TOOLDataFile $TOOLCTLDataFile > /dev/null 2>&1
    if [ $? = 0 ]; then
	echo first diff did not fail as expected
    fi
    # Recover the file.
    # h5recover is not ready yet. Redirect its output to /dev/null.
    $RUNSERIAL $RECOVERTOOL_BIN $TOOLDataFile > /dev/null
    # second diff should produce expected output
    $RUNSERIAL $H5DIFF $TOOLDataFile $TOOLCTLDataFile > $actual
    (
	echo "#############################"
	echo "Expected output for '$TOOL $@'" 
	echo "#############################"
	$RUNSERIAL $H5DIFF $TOOLDataFile $TOOLCTLDataFile
    ) >$actual 2>$actual_err
    cat $actual_err >> $actual

    if [ ! -f $expect ]; then
	echo "missing expected output file($expect)"
	nerrors="`expr $nerrors + 1`"
    elif $CMP $expect $actual; then
	echo " PASSED"
    else
	echo "*FAILED*"
	echo "    Expected result (*.ddl) differs from actual result (*.out)"
	nerrors="`expr $nerrors + 1`"
	test yes = "$verbose" && $DIFF $expect $actual |sed 's/^/    /'
    fi

    # Clean up output file
    if test -z "$HDF5_NOCLEANUP"; then
	 rm -f $actual $actual_err
    fi
}



# Print a "SKIP" message
SKIP() {
	 TESTING $TOOL $@
	  echo  " -SKIP-"
}
  


##############################################################################
##############################################################################
###			  T H E   T E S T S                                            ###
##############################################################################
##############################################################################

# default test setting
TOOLTEST default.txt

# async crash
TOOLTEST async_crash.txt -a 0.005


if test $nerrors -eq 0 ; then
   echo "All $TOOL tests passed."
fi

if test $nerrors -eq 0 ; then
    echo "All $TOOL tests passed."
    exit 0
else
    echo $nerrors errors encountered.
    exit 1
fi
