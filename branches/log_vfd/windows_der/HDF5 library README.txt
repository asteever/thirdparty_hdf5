HDF5 library README document

Dana Robinson (derobins@hdfgroup.org)
9 March, 2011

**************************************************************************
!!! NOTE !!

These Visual Studio projects and solutions are unofficial and NOT
SUPPORTED by the HDF Group.  If you contact me directly, I might be able
to help you but I make no guarantees of that fact.

The HDF Group is moving to providing using CMake for the Windows build
system.  Although the CMake files work fine for *building* HDF5, I find
that they make the ugliest, messiest set of projects and solutions that
I have ever seen.  To avoid blindness and/or being driven insane, I use
these files for internal development.

That said, I hope you find these files helpful :)
**************************************************************************


SECTION I - HOW TO BUILD THE LIBRARY



Building the library on Windows is pretty simple.


1) Set up to build szip and zlib.

See the README in the 'external' folder for help on this.  You just need
to copy some source (even if you don't really need szip or zlib support!).


2) Inspect the H5pubconf.h file to set any HDF5 options you need.

A discussion of all the options is beyond the scope of this document.  For
most people, the defaults will be fine.


3) Rename the libraries if you need to do so.

I use my own non-canonical naming scheme which includes the bitness and
'd' for 'debug' since I often have multiple versions floating around
and don't want to get them confused.  If you hate this, change the library
names in the projects.

I only rename the libraries by the way - executables (tools, tests) always
have the same name.


4) Build some or all of the projects.

Open up the configuration manager (Build->Configuration Manager) and
check/uncheck boxes for the things you want to build.  Be default, 
the solution builds everything except the Fortran wrappers.  You can 
either use the configuration manager or just build individual projects.
Keep in mind that dependencies will require that some things (especially
the HDF5 C library and compression libraries) be built.

Dependencies built into the solution should automatically take care of any
library prerequisites.  All your libraries and executables will appear in
subfolders of the 'dist' folder.


==========================================================================

SECTION II - HOW THE BUILD WORKS

The bulid takes care of several intermediate steps, which I detail here
in case something breaks on you.


- Building external libraries

Before anything else, we need to build the zlib and szip libraries.  Both
compression libraries are listed as dependencies of the basic HDF5 library.
If you don't need one or both of them, the easiest thing is to just copy
the source in and let them buld anyway.

Note that it is highly advisable that you build your zlib and szip libraries
using the provided solutions so that you don't get subtle runtime errors from
mismatched libraries.  Note that I give them both wonky names so it's very
clear that these are private builds of the libraries and not necessarily
for use by other software.


- Building the 'setup' tools

There are two files which are autogenerated for your platform:

H5lib_settings.c

H5Tinit.c

The tools will create them in the HDF5 src directory with the correct
info as a part of their post-build step.  H5lib_settings.c will be
created by the H5make_settings tool and H5Tinit.c will be created by
the H5detect tool.  The projects for these tools are in the tools folder.

The HDF5 library lists both tools as a dependency, so they should be
built before the library.

NOTE: These files will show up as "not present" the first time you load
the solution.

As a side note, these tools need to grab the computer's hostname
and must to be linked to the WinSock library ws2_32.lib.

==========================================================================

SECTION III - SOME NOTES ON THE PROJECTS

All C libraries are 100% built as C (not C++).

The libraries target the CONSOLE subsystem, not WINDOWS (the default).

All tools are 100% statically linked and can be moved around freely.

The static libraries are 100% statically linked.

The dynamic libraries are 100% dynamically linked.  This means you will
probably need to move the zlib and szip dlls with them.